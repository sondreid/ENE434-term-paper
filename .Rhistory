2+2
library(fpp3)
library(readxl)
library(vars)
library(lubridate)
library(magrittr)
library(tidyverse)
library(forecast)
library(feasts)
library(seasonal)
#library(x13binary)
library(kableExtra)
library(urca)
library(tsDyn)
library(bvartools)
install.packages("x13binary")
Sys.setenv(X13_PATH = "../windows_x13/bin")
seasonal::seas
install.packages("seasonal")
seasonal::seas
setwd("G:/Dokumenter/Google drive folder/NHH/Master/ENE434/Term assignment/repo")
setwd("C:\Users\sondr\OneDrive\Desktop\ENE434 repo")
setwd("C:/Users/sondr/OneDrive/Desktop/ENE434 repo")
load(file = "Data/demand_data.Rdata")
load(file = "Data/generation_data.Rdata")
library(EIAdata)
library(fpp3)
library(tidyverse)
library(magrittr)
library(lubridate)
library(x13binary)
library(seasonal)
install.packages("seasonal", type = "source")
install.packages("EIAdata")
install.packages("fpp3")
install.packages("seasonal")
library(EIAdata)
library(fpp3)
library(tidyverse)
library(magrittr)
library(lubridate)
library(x13binary)
library(seasonal)
library(seasonal)
library(x13binary)
library(seasonal)
library(seasonal)
library(EIAdata)
library(fpp3)
library(tidyverse)
library(magrittr)
library(lubridate)
library(x13binary)
library(seasonal)
setwd("C:/Users/sondr/OneDrive/Desktop/Rep_ban403")
load(file = "Data/demand_data.Rdata")
load(file = "Data/generation_data.Rdata")
key <- "81a7388709d31bb149eb1cc9c7eba736"
setwd("C:/Users/sondr/OneDrive/Desktop/Rep_ban403")
getwd()
setwd("C:/Users/sondr/OneDrive/Desktop/ENE434_repo")
#setwd("G:/Dokumenter/Google drive folder/NHH/Master/ENE434/Term assignment/repo")
setwd("C:/Users/sondr/OneDrive/Desktop/ENE434_repo")
#setwd("G:/Dokumenter/Google drive folder/NHH/Master/ENE434/Term assignment/repo")
setwd("C:/Users/sondr/OneDrive/Desktop/ENE434 repo")
load(file = "Data/demand_data.Rdata")
load(file = "Data/generation_data.Rdata")
key <- "81a7388709d31bb149eb1cc9c7eba736"
### Weather data:
# Three stations as of now: Southern rough, Houston, LBJ road
texas_weather <- read.csv("Data/texas_weather.csv") %>%
dplyr::select(NAME:TMIN) %>%
rename(station_name = NAME,
date = DATE,
temp_avg = TAVG,
temp_min = TMIN,
temp_max = TMAX) %>%
mutate(date = lubridate::ymd(date))
retrieveHour <- function(x) {
#'
#'Function that extracts hour  from date
hourVec <- (strsplit(x, split = ""))[[1]][13:14]
return (paste(hourVec[1], hourVec[2], ":00", sep = ""))
}
retrieveDate <- function(x) {
#'
#'Function that extracts hour  from date
date_vec <- (strsplit(x, split = ""))[[1]][2:11]
string <- ""
for (symbol in date_vec) {
if (symbol == ".") next
string <- paste(string, symbol, sep = "")
}
return (string)
}
processFrameGeneration <- function(df, type) {
#' Readies a generation data frame
#' @df : dataframe, input generation data frame
#' @type: string, type of power generation (e.g natural gas or nuclear)
#' @return: returns a processed data frame
oldName <- colnames(df)[1]
df %<>%
mutate(dateRaw = rownames(df),
hour = mapply(retrieveHour,dateRaw),
date = mapply(retrieveDate, dateRaw),
type = type,
date = lubridate::ymd(date)) %>%
rename("mWh_generated" = oldName) %>%
dplyr::select(-dateRaw)
rownames(df) <- seq(1, nrow(df))
return (df)
}
View(texas_weather)
texas_weather <- read.csv("Data/texas_weather.csv") %>%
dplyr::select(NAME:TMIN) %>%
rename(station_name = NAME,
date = DATE,
temp_avg = TAVG,
temp_min = TMIN,
temp_max = TMAX) %>%
mutate(date = lubridate::ymd(date)) %>%
dplyr::select(date, station, temp_avg, temp_min, temp_max)
texas_weather <- read.csv("Data/texas_weather.csv") %>%
dplyr::select(NAME:TMIN) %>%
rename(station = NAME,
date = DATE,
temp_avg = TAVG,
temp_min = TMIN,
temp_max = TMAX) %>%
mutate(date = lubridate::ymd(date)) %>%
dplyr::select(date, station, temp_avg, temp_min, temp_max)
View(texas_weather)
weather_daily <- texas_weather %>%
group_by(lubridate::day(date)) %>%
summarise(temp_avg_daily = sum(temp_avg))
View(weather_daily)
View(weather_daily)
View(texas_weather)
texas_weather %>% dplyr::select(temp_avg) %>% ts() %>%  seas() %>% autoplot()
texas_weather %>% dplyr::select(temp_avg) %>% ts()
texas_weather %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS())
View(texas_weather)
texas_weather %>% as_tsibble()
texas_weather %>% as_tsibble(index = date)
duplicates(texas_weather)
texas_weather %>% unique()
texas_weather %>% unique() %>% tail()
View(texas_weather)
View(texas_weather)
avg(c(1,2))
average(c(1,2))
average
mean
mean(c(1,2))
# Compose new dataframe where all stations are combined
texas_weather_avg <- texas_weather %>% group_by(date) %>%
summarise(temp_avg = mean(temp_avg),
temp_min = min(temp_min), # Minimum from all stations readings
temp_max = max(temp_max)) # maximum of all station readings
View(texas_weather_avg)
texas_weather_avg <- texas_weather %>% group_by(date) %>%
summarise(temp_avg = mean(temp_avg),
temp_min = mean(temp_min),
temp_max = mean(temp_max))
texas_weather_avg
View(texas_weather_avg)
7800*3
texas_weather_avg <- texas_weather %>% group_by(date) %>%
filter(is.na(temp_avg)) %>%
summarise(temp_avg = mean(temp_avg),
temp_min = mean(temp_min),
temp_max = mean(temp_max))
View(texas_weather_avg)
texas_weather_avg <- texas_weather %>% group_by(date) %>%
filter(!is.na(temp_avg)) %>%
summarise(temp_avg = mean(temp_avg),
temp_min = mean(temp_min),
temp_max = mean(temp_max))
View(texas_weather_avg)
texas_weather_avg %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS())
texas_weather_avg %>% dplyr::select(temp_avg) %>% ts() %>%  seas() %>% autoplot()
texas_weather_avg %>% dplyr::select(temp_avg) %>% ts(start  = c("2000"),
frequency  = 360) %>%  seas() %>% autoplot()
texas_weather_avg %>% dplyr::select(temp_avg) %>% ts(start  = c("2000"),
frequency  = 180) %>%  seas() %>% autoplot()
texas_weather_avg %>% dplyr::select(temp_avg) %>% ts(start  = c("2000"),
frequency  = 12) %>%  seas() %>% autoplot()
x13_decomp <- seas(ts(demand_data_monthly %>%  filter(year(date) > 2015) %>%  dplyr::select(mWh_demand_monthly),
start = c("2016"),
frequency = 12)) ## Assuming one cold weather season
generation_monthly <- generation_daily %>%
mutate(month = lubridate::month(date),
year  = lubridate::year(date)) %>%
group_by(month, year, type) %>%
summarise(mWh_generated = sum(mWh_generated)) %>%
unique() %>%
mutate(date = lubridate::ymd(paste(year, month, "-01"))) %>%
dplyr::select(-year,-month)
demand_data_monthly <- demand_data_daily %>%
mutate(month = lubridate::month(date),
year  = lubridate::year(date)) %>%
group_by(month, year) %>%
summarise(mWh_demand_monthly = sum(mWh_demand_daily)) %>%
ungroup() %>%
unique() %>%
mutate(date = lubridate::ymd(paste(year, month, "-01"))) %>%
dplyr::select(-year,-month)
## Training data (Monthly)
generation_total_train <- generation_monthly %>% filter(year(date) < 2019)
# Seasonal decomposition of demand
x13_decomp <- seas(ts(demand_data_monthly %>%  filter(year(date) > 2015) %>%  dplyr::select(mWh_demand_monthly),
start = c("2016"),
frequency = 12)) ## Assuming one cold weather season
texas_weather_avg %>% dplyr::select(temp_avg) %>% ts(start  = c("2000"),
frequency  = 12)
x13_decomp_weather <-
seas(ts(texas_weather_avg %>%  dplyr::select(mWh_demand_monthly),
start = c("2000"),
frequency = 12)
)
colnames(texas_weather_avg)
x13_decomp_weather <-
seas(ts(texas_weather_avg %>%  dplyr::select(temp_avg),
start = c("2000"),
frequency = 12)) ## Assuming one cold weather season
texas_weather_avg %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS())
x13_decomp_weather <-
seas(ts(texas_weather_avg %>%  dplyr::select(temp_avg),
start = c("2000"),
frequency = 12)) ## Assuming one cold weather season
texas_weather_avg %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS(X11 ~temp_avg))
texas_weather_avg %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS(temp_avg~X11()))
texas_weather_avg %>% dplyr::select(date, temp_avg) %>%
as_tsibble(index = date) %>%
model(x13_weather = X_13ARIMA_SEATS(temp_avg ~ x11()))
library(EIAdata)
library(fpp3)
library(tidyverse)
library(magrittr)
library(lubridate)
library(x13binary)
library(seasonal)
