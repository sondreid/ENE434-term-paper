load(file = "Data/texas_data.Rdata")
color_scheme <- c("black", "#EDA63A", "#5093F8",
"#34eb89", "#9d45f5",  "#f5455c",
"#0ac47d", "#b5070a", "#f57542") # General color scheme for plots
texas_temperature <- read.csv("Data/texas_temperature.csv") %>%
dplyr::select(NAME:TMIN) %>%
rename(station = NAME,
date = DATE,
temp_avg = TAVG,
temp_min = TMIN,
temp_max = TMAX) %>%
mutate(date = lubridate::ymd(date)) %>%
dplyr::select(date, station, temp_avg, temp_min, temp_max)
# Compose new dataframe where three station data is averaged
texas_temperature_avg <- texas_temperature %>% group_by(date) %>%
filter(!is.na(temp_avg)) %>%
summarise(temp_avg = mean(temp_avg),
temp_min = min(temp_min),
temp_max = max(temp_max))
options(knitr.kable.NA = '')
# Minimum, 25%-percentile, Mean, Median, 75%-percentile and Maximum by month
# Create table data
table_power_input_data <- demand_data_daily %>% filter(date > "2018-07-01") %>%
left_join(generation_daily %>% filter(type == "total"), by = c("date")) %>%
filter(!is.na(mWh_generated))
tibble(Type = "Power demand",
Minimum = min(table_power_input_data$mWh_demand_daily),
Max = max(table_power_input_data$mWh_demand_daily),
"Maximum date" = table_power_input_data[which.max(table_power_input_data$mWh_demand_daily),]$date,
"Minimum date" = table_power_input_data[which.min(table_power_input_data$mWh_demand_daily),]$date,
"25% - percentile" = quantile(table_power_input_data$mWh_demand_daily, 0.25),
"75% - percentile" = quantile(table_power_input_data$mWh_demand_daily, 0.75)) %>%
bind_rows(
tibble(Type = "Power generation",
Minimum = min(table_power_input_data$mWh_generated),
Max = max(table_power_input_data$mWh_generated),
"Maximum date" = table_power_input_data[which.max(table_power_input_data$mWh_generated),]$date,
"Minimum date" = table_power_input_data[which.min(table_power_input_data$mWh_generated),]$date,
"25% - percentile" = quantile(table_power_input_data$mWh_generated, 0.25),
"75% - percentile" = quantile(table_power_input_data$mWh_generated, 0.75)),) %>%
kbl(caption = "Summary statistics of power generaton and power demand in Texas (from 2018-07)") %>%
kable_classic(full_width = F, html_font = "Times new roman")
tibble("Maximum deviation" =max(table_power_input_data$mWh_demand_daily - table_power_input_data$mWh_generated),
"Maximum deviation date" = table_power_input_data[which.max(max(table_power_input_data$mWh_demand_daily -
table_power_input_data$mWh_generated)),]$date) %>%
kbl(caption = "Maximum difference in power demand and total power generation") %>%
kable_classic(full_width = F, html_font = "Times new roman")
# Minimum, 25%-percentile, Mean, Median, 75%-percentile and Maximum by month
# Create table data
table_power_input_data <- demand_data_daily %>% filter(date > "2018-07-01") %>%
left_join(generation_daily %>% filter(type == "total"), by = c("date")) %>%
filter(!is.na(mWh_generated))
temperature_table_data <- texas_temperature %>% filter(!is.na(temp_max))
# Remove clear outliers
temperature_table_data %<>% filter(!temp_min < -40)
tibble("Average temperature" = mean(texas_temperature_avg$temp_avg),
"Max average temperature" = max(texas_temperature_avg$temp_avg),
"Max average temperature date" = texas_temperature_avg[which.max(texas_temperature_avg$temp_avg), ]$date,
"Minimum average temperature" = min(texas_temperature_avg$temp_avg),
"Minimum average temperature date" = texas_temperature_avg[which.min(texas_temperature_avg$temp_avg), ]$date,
"Absolute maximum temperature" = max(temperature_table_data$temp_max),
"Absolute maximum temperature date" = temperature_table_data[which.max(temperature_table_data$temp_max),]$date,
"Absolute minimum temperature"       = min(temperature_table_data$temp_min),
"Absolute minimum temperature date" = temperature_table_data[which.min(temperature_table_data$temp_min),]$date)   %>%
kbl(caption = "Summary temperature statistics") %>%
kable_classic(full_width = F, html_font = "Times new roman")
### Energy generation by source in february
demand_data_daily  %>%
filter(month(date) == 2 &
year(date) == 2021) %>%
ggplot() +
geom_line(aes(x = date, y = mWh_demand_daily, col = "mWh demand")) +
geom_line(aes(x = date, mWh_generated, col = "mWh generated" ),
data = generation_daily %>% filter(
month(date) == 2 &
year(date) == 2021 &
type == "total"
)) +
scale_colour_manual(values = color_scheme) +
labs(title = "Demand vs power generation", subtitle = "in mWh",
x = "Date", y = "mWh") +
theme_bw()
### Closer look at load sheds days
#load_sheds <- data.frame(date = lubridate::ymd(c("2021-02-14")),
#                        load_shed = c())
demand_data_daily  %>%
filter(date > "2021-02-07" &
date < "2021-02-23") %>%
mutate(mWh_generated = (generation_daily %>%
filter(date > "2021-02-07" &
date < "2021-02-23",
type == "total"
))$mWh_generated) %>%
ggplot() +
geom_line(aes(x = date, y = mWh_demand_daily, col = "mWh demand")) +
geom_line(aes(x = date, mWh_generated, col = "mWh generated" )) +
geom_ribbon(aes(x = date, ymin = mWh_demand_daily,
ymax = mWh_generated), fill = "grey") +
geom_vline(xintercept = as.numeric(as.Date("2021-02-14")),
linetype = 4, col = "#eb8034") +
scale_colour_manual(values = color_scheme) +
labs(title = "Demand vs power generation", subtitle = "in mWh",
x = "Date", y = "mWh") +
theme_bw()
### Energy generation by source in february
generation_daily  %>%
filter(month(date) == 2 &
year(date) == 2021 &
type %notin% c("total", "other")) %>%
ggplot(aes(x = date, y = mWh_generated)) +
geom_line(aes(col = type)) +
scale_colour_manual(values = color_scheme) +
labs(title = "Power generation for all major sources in Texas",
subtitle = "in mWh",
x = "Date", y = "mWh") +
theme_bw() +
scale_colour_discrete("Type of generation")
### Temperature averages
knitr::opts_chunk$set(fig.width=12, fig.height=8)
texas_temperature_avg   %>%
ggplot(aes(x = date, y = temp_avg)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Average daily temperatures",
subtitle = "in degrees celsius",
x = "Date", y = "Degrees celsius") +
theme_bw()
### Temperature averages
texas_temperature_avg %>%
mutate(year = year(date),
month = month(date, label = TRUE),
day = day(date)) %>%
group_by(month, year) %>%
summarise(avg_temp_month = mean(temp_avg)) %>%
ggplot(aes(x = year, y = avg_temp_month, fill = year)) +
geom_col() +
scale_fill_hp(option = "LunaLovegood") +
facet_wrap(~month) +
labs(title = "Mean monthly temperature for the period 2000-2021",
subtitle = "in degrees celsius",
ylab = "Monthly average temperature in celsius",
xlab = "Year") +
theme_bw() +
theme(
strip.background = element_rect(fill = "grey20", color = "grey80", size = 1),
strip.text = element_text(colour = "white")
)
# facet plot of temperature
facet_data <- generation_daily %>%
filter(type %in% c("nuclear", "gas", "wind") &
date > "2020-12-01" & date < "2021-03-01")
facet_data %>%
filter(date > "2021-02-7") %>%
ggplot() +
geom_line(aes(date, y = temp_avg , col = "temp"), data = nuclear_data %>%
left_join(texas_temperature_avg, by = "date") %>%
filter(date > "2021-02-7")) +
geom_line(aes(x = date,  y = mWh_generated, col = type)) +
theme_bw()
# facet plot of temperature
arima_temperature_2011 <- texas_temperature_avg %>%
filter(date > "2011-01-16" &
date < "2011-02-14") %>%
mutate(date = seq(ymd("2021-02-01"), ymd("2021-02-28"), by = "days")) %>%
as_tsibble(index = date)
unitroot_kpss(arima_temperature_2011$temp_avg)
ggtsdisplay(arima_temperature_2011$temp_avg,
plot.type = "partial",
lag.max = 24,
theme = theme_bw(),
main = "Non-differenced temperature data from 2011-01-16:2011-02-14")
# facet plot of temperature
arima_temperature_2011 <- texas_temperature_avg %>%
filter(date > "2011-01-16" &
date < "2011-02-14") %>%
mutate(date = seq(ymd("2021-02-01"), ymd("2021-02-28"), by = "days")) %>%
as_tsibble(index = date)
unitroot_kpss(arima_temperature_2011$temp_avg) %>% kbl()
ggtsdisplay(arima_temperature_2011$temp_avg,
plot.type = "partial",
lag.max = 24,
theme = theme_bw(),
main = "Non-differenced temperature data from 2011-01-16:2011-02-14")
unitroot_kpss(arima_temperature_2011$temp_avg) %>%
kbl(caption = "Unitroot test on 2011 temperature data") %>%
kable_classic(full_width = F, html_font = "Times new roman")
### Closer look at load sheds days
#load_sheds <- data.frame(date = lubridate::ymd(c("2021-02-14")),
#                        load_shed = c())
demand_data_daily  %>%
filter(date > "2021-02-07" &
date < "2021-02-23") %>%
mutate(mWh_generated = (generation_daily %>%
filter(date > "2021-02-07" &
date < "2021-02-23",
type == "total"
))$mWh_generated) %>%
ggplot() +
geom_line(aes(x = date, y = mWh_demand_daily, col = "mWh demand")) +
geom_line(aes(x = date, mWh_generated, col = "mWh generated" )) +
geom_ribbon(aes(x = date, ymin = mWh_demand_daily,
ymax = mWh_generated), fill = "grey") +
geom_vline(xintercept = as.numeric(as.Date("2021-02-14")),
linetype = 4, col = "#eb8034") +
scale_colour_manual(values = color_scheme) +
labs(title = "Demand vs power generation", subtitle = "in mWh",
x = "Date", y = "mWh") +
theme_bw() +
scale_colour_discrete("Colour of series:")
### Closer look at load sheds days
#load_sheds <- data.frame(date = lubridate::ymd(c("2021-02-14")),
#                        load_shed = c())
demand_data_daily  %>%
filter(date > "2021-02-07" &
date < "2021-02-23") %>%
mutate(mWh_generated = (generation_daily %>%
filter(date > "2021-02-07" &
date < "2021-02-23",
type == "total"
))$mWh_generated) %>%
ggplot() +
geom_line(aes(x = date, y = mWh_demand_daily, col = "mWh demand")) +
geom_line(aes(x = date, mWh_generated, col = "mWh generated" )) +
geom_ribbon(aes(x = date, ymin = mWh_demand_daily,
ymax = mWh_generated), fill = "grey") +
geom_vline(xintercept = as.numeric(as.Date("2021-02-14")),
linetype = 4, col = "#eb8034") +
scale_colour_manual(values = color_scheme) +
labs(title = "Demand vs power generation", subtitle = "in mWh. Vertical line represents load shed order issued by ERCOT",
x = "Date", y = "mWh") +
theme_bw() +
scale_colour_discrete("Colour of series:")
arima_simulation <- function(fit,
days  = 30,
start_date = "2021-02-01")
{
#'Generates an optimized arima fit of based on the input dataframe
#'on 'variable'. Based on the coefficients, AR and SMA orders, return
#'a simulated ARIMA series. Outputs a tsibble
#'@df : input temperature dataframe
#'@days: simulation duration
#'@start_date: start date of the simulation
ar_terms = (fit %>%
coefficients %>%
dplyr::filter(stringr::str_detect(term,"ar")))$estimate %>%
c(.)
ma_terms = (fit %>%
coefficients  %>%
dplyr::filter(stringr::str_detect(term, "ma")))$estimate %>%
c(.)
constant_term = (fit %>% coefficients %>%
dplyr::filter(stringr::str_detect(term, "constant")))$estimate %>%
c(.)
if (identical(constant_term, numeric(0))) constant_term <- 0
if (identical(ma_terms, numeric(0))) {
arima_sim_model = list(order = fit[[1]][[1]]$fit$spec[1:3] %>%
t() %>% c(.),
ar = ar_terms)
}
else {
arima_sim_model = list(order = fit[[1]][[1]]$fit$spec[1:3] %>%
t() %>% c(.),
ar = ar_terms,
ma = ma_terms)
}
sigma = sd(residuals(fit)$.resid)
sim_arima = arima.sim(model = arima_sim_model,
n = days,
sd = sigma)
return(
data.frame(date = seq(from = ymd(start_date), length.out = length(sim_arima), by = "day"),
variable = sim_arima ) %>%
mutate(variable = variable + constant_term + rnorm(n = 1, mean = 0, sd(sim_arima)))  %>%
as_tsibble(index = date))
}
## Print an example generated series
arima_simulation(fit_arima_temperature) %>% plot()
forecast_sim <- function(ts,
fit,
days = 30,
start_date = "2020-02-01")
{
#' Function that performs a dynamic arima forecast based on a fitted
#' arima series.
#'@ts: timeseries or tsibble object of demand
arima_sim = arima_simulation(fit, days, start_date)
fit_demand = ts  %>%
model(arima_dynamic_demand = ARIMA(mWh_demand_daily~variable,
stepwise = TRUE,
approximation = FALSE))
fc_demand = fit_demand %>% forecast(new_data = arima_sim)
return (fc_demand)
}
arima_simulation(fit_arima_temperature)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) %>%
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
x = "Date", y = "Degrees celsius") +
theme_bw()
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
x = "Date", y = "Degrees celsius") +
theme_bw()
set.seed(123)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
subtitle = "on 2011 temperature time series"
x = "Date", y = "Degrees celsius") +
set.seed(123)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
subtitle = "on 2011 temperature time series",
x = "Date", y = "Degrees celsius") +
theme_bw()
set.seed(1)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
subtitle = "on 2011 temperature time series",
x = "Date", y = "Degrees celsius") +
theme_bw()
## Print an example generated series
set.seed(2)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
subtitle = "on 2011 temperature time series",
x = "Date", y = "Degrees celsius") +
theme_bw()
set.seed(4)
arima_simulation(fit_arima_temperature) %>%
ggplot(aes(x = date, y = variable)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example generated arima series",
subtitle = "on 2011 temperature time series",
x = "Date", y = "Degrees celsius") +
theme_bw()
# Minimum, 25%-percentile, Mean, Median, 75%-percentile and Maximum by month
# Create table data
table_power_input_data <- demand_data_daily %>% filter(date > "2018-07-01") %>%
left_join(generation_daily %>% filter(type == "total"), by = c("date")) %>%
filter(!is.na(mWh_generated))
tibble(Type = "Power demand",
Minimum = min(table_power_input_data$mWh_demand_daily),
Max = max(table_power_input_data$mWh_demand_daily),
"Maximum date" = table_power_input_data[which.max(table_power_input_data$mWh_demand_daily),]$date,
"Minimum date" = table_power_input_data[which.min(table_power_input_data$mWh_demand_daily),]$date,
"25% - percentile" = quantile(table_power_input_data$mWh_demand_daily, 0.25),
"75% - percentile" = quantile(table_power_input_data$mWh_demand_daily, 0.75)) %>%
bind_rows(
tibble(Type = "Power generation",
Minimum = min(table_power_input_data$mWh_generated),
Max = max(table_power_input_data$mWh_generated),
"Maximum date" = table_power_input_data[which.max(table_power_input_data$mWh_generated),]$date,
"Minimum date" = table_power_input_data[which.min(table_power_input_data$mWh_generated),]$date,
"25% - percentile" = quantile(table_power_input_data$mWh_generated, 0.25),
"75% - percentile" = quantile(table_power_input_data$mWh_generated, 0.75)),) %>%
kbl(caption = "Summary statistics of power generaton and power demand in Texas (from 2018-07)") %>%
kable_classic(full_width = F, html_font = "Times new roman")
tibble("Maximum deviation" =max(table_power_input_data$mWh_demand_daily - table_power_input_data$mWh_generated),
"Maximum deviation date" = table_power_input_data[which.max(max(table_power_input_data$mWh_demand_daily -
table_power_input_data$mWh_generated)),]$date) %>%
kbl(caption = "Maximum difference in power demand and total power generation") %>%
kable_classic(full_width = F, html_font = "Times new roman")
forecast_sim(demand_temp_2021,fit_arima_temperature, days = 30, start_date = "2020-02-01")
forecast_sim(demand_temp_2021,fit_arima_temperature, days = 30, start_date = "2020-02-01")
forecast_sim(demand_temp_2021,fit_arima_temperature, days = 30, start_date = "2021-02-01") %>%
ggplot(aes(x = date, y = .mean)) +
geom_line() +
scale_colour_manual(values = color_scheme) +
labs(title = "Example dynamic forecast of demand",
subtitle = "based on simulated temperatures and observed demand in 2021",
x = "Date", y = "mWh demand") +
theme_bw()
max_generation <- (generation_daily %>% dplyr::filter(type == "total") %>%
arrange(desc(mWh_generated)))[1,]$mWh_generated
## Any forecasted daily demand over estimated max_generation
demand_exceeded <- data.frame("run_nr" = seq(1, 10),
exceed = FALSE,
max_demand = 0)
for(i in 1:10) {
fc_sim = forecast_sim(ts = demand_temp_2021, fit = fit_arima_temperature )
max_demand = max(fc_sim$.mean)
demand_exceeded[i, "max_demand"] <- max_demand
if (max_demand > max_generation)  demand_exceeded[i, "exceed"] <- TRUE
}
demand_exceeded %>%
summarise(count = sum(exceed, na.rm = TRUE),
percentage = paste((count/n())*100, "%"),
mean  = mean(max_demand),
max   = max(max_demand)) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
max_generation <- (generation_daily %>% dplyr::filter(type == "total") %>%
arrange(desc(mWh_generated)))[1,]$mWh_generated
## Any forecasted daily demand over estimated max_generation
demand_exceeded <- data.frame("run_nr" = seq(1, 10),
exceed = FALSE,
max_demand = 0)
for(i in 1:10) {
fc_sim = forecast_sim(ts = demand_temp_2021, fit = fit_arima_temperature )
max_demand = max(fc_sim$.mean)
demand_exceeded[i, "max_demand"] <- max_demand
if (max_demand > max_generation)  demand_exceeded[i, "exceed"] <- TRUE
}
demand_exceeded %>%
summarise(count = sum(exceed, na.rm = TRUE),
percentage = paste((count/n())*100, "%"),
mean  = mean(max_demand),
max   = max(max_demand)) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
max_generation <- (generation_daily %>% dplyr::filter(type == "total") %>%
arrange(desc(mWh_generated)))[1,]$mWh_generated
## Any forecasted daily demand over estimated max_generation
demand_exceeded <- data.frame("run_nr" = seq(1, 100),
exceed = FALSE,
max_demand = 0)
for(i in 1:100) {
fc_sim = forecast_sim(ts = demand_temp_2021, fit = fit_arima_temperature )
max_demand = max(fc_sim$.mean)
demand_exceeded[i, "max_demand"] <- max_demand
if (max_demand > max_generation)  demand_exceeded[i, "exceed"] <- TRUE
}
demand_exceeded %>%
summarise(count = sum(exceed, na.rm = TRUE),
percentage = paste((count/n())*100, "%"),
mean  = mean(max_demand),
max   = max(max_demand)) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
demand_exceeded %>%
summarise("Number of simulations exceeding peak generation" = sum(exceed, na.rm = TRUE),
"Percentage" = paste((count/n())*100, "%"),
"Mean demand observed"  = mean(max_demand),
"Max demand observed"   = max(max_demand)) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
demand_exceeded %>%
summarise("Number of simulations exceeding peak generation" = sum(exceed, na.rm = TRUE),
"Percentage" = paste((count/n())*100, "%"),
"Mean demand observed"  = mean(max_demand),
"Max demand observed"   = max(max_demand)) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
demand_exceeded %>%
summarise("Number of simulations exceeding peak generation" = sum(exceed, na.rm = TRUE)
)
demand_exceeded %>%
summarise("Number of simulations exceeding peak generation" = sum(exceed, na.rm = TRUE),
"Percentage" = paste((count/n())*100, "%"),
"Mean demand observed"  = mean(max_demand),
"Max demand observed"   = max(max_demand))
demand_exceeded %>%
summarise(count = sum(exceed, na.rm = TRUE),
"Percentage" = paste((count/n())*100, "%"),
"Mean demand observed"  = mean(max_demand),
"Max demand observed"   = max(max_demand)) %>%
rename("Number of simulations exceeding peak generation" = count) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
set.seed(1234)
max_generation <- (generation_daily %>% dplyr::filter(type == "total") %>%
arrange(desc(mWh_generated)))[1,]$mWh_generated
## Any forecasted daily demand over estimated max_generation
demand_exceeded <- data.frame("run_nr" = seq(1, 1000),
exceed = FALSE,
max_demand = 0)
for(i in 1:1000) {
fc_sim = forecast_sim(ts = demand_temp_2021, fit = fit_arima_temperature )
max_demand = max(fc_sim$.mean)
demand_exceeded[i, "max_demand"] <- max_demand
if (max_demand > max_generation)  demand_exceeded[i, "exceed"] <- TRUE
}
demand_exceeded %>%
summarise(count = sum(exceed, na.rm = TRUE),
"Percentage" = paste((count/n())*100, "%"),
"Mean demand observed"  = mean(max_demand),
"Max demand observed"   = max(max_demand)) %>%
rename("Number of simulations exceeding peak generation" = count) %>%
kbl(caption = "Forecasted simulated demand on 2011 temperatures ", align = "c") %>%
kable_paper(full_width = F) %>%
footnote(general  = "Based on 1000 simulations") %>%
kable_classic(full_width = F, html_font = "Times new roman")
